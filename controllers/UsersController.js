import sha1 from 'sha1';
import { ObjectId } from 'mongodb';
import dbClient from '../utils/db';
import redisClient from '../utils/redis';

class UsersController {
  /**
   * Creates a user using email and password
   *
   * To create a user, you must specify an email and a password
   * If the email is missing, return an error Missing email with
   * a status code 400
   * If the password is missing, return an error Missing password with
   * a status code 400
   * If the email already exists in DB, return an error Already exist with
   * a status code 400
   * The password must be stored after being hashed in SHA1
   * The endpoint is returning the new user with only the email and the id
   * (auto generated by MongoDB) with a status code 201
   * The new user must be saved in the collection users:
   * email: same as the value received
   * password: SHA1 value of the value received
   */
  static async postNew(req, res) {
    const email = req.body ? req.body.email : null;
    const password = req.body ? req.body.password : null;

    if (!email) {
      return res.status(400).json({
        error: 'Missing email',
      });
    }
    if (!password) {
      return res.status(400).json({
        error: 'Missing password',
      });
    }

    // Check if user already exists
    const userOld = await dbClient.userCollection.findOne({ email });
    if (userOld) return res.status(400).json({ error: 'Already exist' });

    // Create the new user
    const user = await dbClient.userCollection.insertOne({ email, password: sha1(password) });
    const userId = user.insertedId.toString();

    return res.status(201).json({
      id: userId,
      email,
    });
  }

  /**
   *
   * Should retrieve the user base on the token used
   *
   * Retrieve the user based on the token:
   * If not found, return an error Unauthorized with a
   * status code 401
   * Otherwise, return the user object (email and id only)
   */
  static async getMe(req, res) {
    const userId = await redisClient.get(`auth_${req.headers['x-token']}`);
    if (!userId) return res.status(401).json({ error: 'Unauthorized' });

    const user = await dbClient.userCollection.findOne({ _id: new ObjectId(userId) });
    if (!user) return res.status(401).json({ error: 'Unauthorized' });

    return res.status(200).json({
      id: userId,
      email: user.email,
    });
  }
}
export default UsersController;
